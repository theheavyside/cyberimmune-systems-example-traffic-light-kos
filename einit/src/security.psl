use nk.basic._

execute: kl.core.Execute

use nk.base._

use EDL Einit
use EDL kl.VfsNet
use EDL kl.core.Core
use EDL kl.drivers.BSP
use EDL kl.drivers.GPIO

use EDL traffic_light.ControlSystem
use EDL traffic_light.LightsGPIO
use EDL traffic_light.Diagnostics

error {
    grant ()
}

execute src = Einit, dst = kl.drivers.BSP
{
    grant()
}

request src = kl.drivers.BSP, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.BSP
{
    grant()
}

execute src = Einit, dst = kl.drivers.GPIO
{
    grant()
}

request src = kl.drivers.GPIO, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.GPIO
{
    grant()
}

execute {
    grant ()
}

request src=traffic_light.ControlSystem {
    grant ()
}

request src=traffic_light.Diagnostics dst=kl.core.Core {
    grant ()
}

request src=traffic_light.ControlSystem dst=kl.core.Core {
    grant ()
}

request src=traffic_light.ControlSystem 
    dst=traffic_light.LightsGPIO 
    endpoint=lightsGpio.mode 
    method=FMode {
        /* white list of states */
        assert(bool.any [
            message.value == 0x101,
            message.value == 0x103,
            message.value == 0x104,
            message.value == 0x102,
            message.value == 0x301,
            message.value == 0x401,
            message.value == 0x201,
            message.value == 0xA0A])        
}

request src=traffic_light.Diagnostics
    dst=traffic_light.LightsGPIO
    endpoint=diagStatus.status
    method=GetStatus {
        grant()
    }

request src=Einit {
    grant ()
}

request src=kl.core.Core {
    grant ()
}

execute src=Einit, dst=kl.VfsNet
{
    grant()
}

request src=kl.VfsNet, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.VfsNet
{
    grant()
}

request src=traffic_light.Diagnostics, dst=kl.VfsNet
{
    grant()
}

response src=kl.VfsNet, dst=traffic_light.Diagnostics
{
    grant()
}

request src=traffic_light.LightsGPIO dst=kl.core.Core {
    grant ()
}

response {
    grant ()
}

error {
    grant ()
}

security {
    grant ()
}
